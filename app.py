import pandas as pd
import streamlit as st

st.set_page_config(layout="wide")

@st.cache  # üëà Added this
def upload_data():
    df = pd.read_csv('monitor.csv', dtype=object)
    class_degree_dict = {'–ï–ì–≠. –ë–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞':'–ï–ì–≠', '–ï–ì–≠ –¥–ª—è 10 –∫–ª–∞—Å—Å–∞':'10 –∫–ª–∞—Å—Å'}
    df['class_degree'] = df['class_degree'].apply(lambda x: class_degree_dict.get(x,x))
    return df

df = upload_data()

def query_string(subject, degree, speaker, tariff, packet, student_list = ''):
    var_names = ['subject','class_degree','speaker','tariff', 'is_pack']
    vars = [subject, degree, speaker, tariff, packet]
    query = ' and '.join([f'{var_names[i]} == "{vars[i]}"' for i in range(len(var_names)) if vars[i] != '–í—Å–µ'])
    filename = '-'.join([f'{var_names[i]}_{vars[i]}'.replace('–í—Å–µ','all') for i in range(len(var_names))])
    if query == '' and (student_list == '' or student_list == []):
        return filename,'subject != "marvan"'
    elif student_list != '':
        query = query+ 'student_id in @student_list'
        filename = filename+'_studlimited'
        return filename,query
    else:
        return filename,query

subject_names = df.subject.unique().tolist()
degree_names = df.class_degree.unique().tolist()
speaker_names = df.speaker.unique().tolist()
tariff_names = df.tariff.unique().tolist()



st.markdown('### –≠—Ç–æ –≤—Ç–æ—Ä–∞—è –≤–µ—Ä—Å–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫. –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–∞ –æ–∫—Ç—è–±—Ä—å 2022 –≥–æ–¥–∞. –ñ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π üê±')
st.markdown('–ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å, —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞–¥–ø–∏—Å—å—é "Running" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.')
st.markdown('–û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∞–π—Ç–∏ –û–ì–≠ –ø–æ –ò—Å—Ç–æ—Ä–∏–∏ —É –®–∞—Ä–∞—Ñ–∏–µ–≤–∞.')
st.markdown('–ò —Å–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–µ—Ä–≤–æ–π –∑–∞–∫–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã, –∞ –∑–∞—Ç–µ–º –º–µ–Ω—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')

col1, col2, col3, col4, col5 = st.columns(5)
with col1:
    subject = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç',['–í—Å–µ']+subject_names)
with col2:
    degree = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å',['–í—Å–µ']+degree_names)
with col3:
    speaker = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏–∫–µ—Ä–∞',['–í—Å–µ']+speaker_names)
with col4:
    tariff = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ',['–í—Å–µ']+tariff_names)
with col5:
    packet = st.selectbox('–¢–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç—ã?',['–í—Å–µ']+['0','1'], help = '1 - —É—á–µ–Ω–∏–∫–∏ —Å –ø–∞–∫–µ—Ç–∞–º–∏, 0 - –±–µ–∑')

students = df.student_id.unique().tolist()
student_list = st.multiselect('–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∏—Ö ID', students, help = '–í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º. –í–Ω—É—Ç—Ä–∏ –≤—à–∏—Ç —É–º–Ω—ã–π –ø–æ–∏—Å–∫')

with st.spinner('–í—ã–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ —Ç–µ–∫—É—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º...'):
    filename, query = query_string(subject, degree, speaker, tariff, packet, student_list= student_list)
    dft = df.query(query)
st.dataframe(dft)

n_stud_unique = dft.student_id.nunique()
n_stud = len(dft.student_id)
mean_hw_result = round(dft.avg_result.astype(float).mean(),2)
mean_hw_count = round(dft.count_done_hw.astype(float).mean(),2)
mean_web_count = round(dft.count_vieved_web.astype(float).mean(),2)

col1, col2, col3, col4, col5 = st.columns(5)
with col1:
    st.metric('–ß–∏—Å–ª–æ —É—á–µ–Ω–∏–∫–æ–≤', n_stud, help = '–ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –∫—É–ø–∏–ª –¥–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ - —ç—Ç–æ –¥–≤–∞ —É—á–µ–Ω–∏–∫–∞')
with col2:
    st.metric('–ß–∏—Å–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤', n_stud_unique, help = '–ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –∫—É–ø–∏–ª 2 –ø—Ä–µ–¥–º–µ—Ç–∞ - —ç—Ç–æ –æ–¥–∏–Ω —É—á–µ–Ω–∏–∫')
with col3:
    st.metric('–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –î–ó', mean_hw_result)
with col4:
    st.metric('–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –î–ó', mean_hw_count)
with col5:
    st.metric('–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–µ–±–æ–≤', mean_web_count)

with st.expander('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏'):
    st.markdown('–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')




@st.cache
def convert_df(df):
    return df.to_csv().encode('utf-8')
with st.expander('–°–¥–µ–ª–∞—Ç—å –≤—ã–≥—Ä—É–∑–∫—É'):
    st.markdown('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—ã–≥—Ä—É–∑–∫—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥')
    code = st.text_input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—é–¥–∞')
    if code !='':

        st.markdown(filename+'.csv')
        csv = convert_df(dft)
        st.download_button(
            label="–°–¥–µ–ª–∞—Ç—å –≤—ã–≥—Ä—É–∑–∫—É –ø–æ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º",
            data=csv,
            file_name=filename+'.csv',
            mime='text/csv',
        )

